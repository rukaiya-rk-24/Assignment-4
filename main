Quesn 1.
vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            //code here.
            vector<int> ans;
            int i=0,j=0,k=0,x=0;
            while(i<n1 && j<n2 && k<n3){
                if(A[i]==B[j] && B[j]==C[k] && A[i]!=x){
                    ans.push_back(A[i]);
                    x=A[i];
                    i++;
                    j++;
                    k++;
                }
                else if(A[i]<B[j]) i++;
                else if(B[j]<C[k]) j++;
                else k++;
            }
            return ans;
        }


Quesn 2.
vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mpp1;
        unordered_map<int,int> mpp2;
        for(int x:nums1) mpp1[x]++;
        for(int x:nums2) mpp2[x]++;
        vector<int> ans1, ans2;
        for(auto i:mpp1){
            if(mpp2[i.first]==0) ans1.push_back(i.first);
        }
        for(auto i:mpp2){
            if(mpp1[i.first]==0) ans2.push_back(i.first);
        }
        vector<vector<int>> anss;
        anss.push_back(ans1);
        anss.push_back(ans2);
        return anss;
    }


Quesn 3.
vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        int n=matrix.size(),m=matrix[0].size();
        vector<vector<int>> ans(m,vector<int> (n));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ans[j][i]=matrix[i][j];
            }
        }
        return ans;
    }



Quesn 4.
int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int ans=0;
        for(int i=0;i<nums.size();i+=2) ans+=nums[i];
        return ans;
    }


Quesn 5.
int arrangeCoins(int n) {
        int rows=0;
        if(n==1) return 1;
        long long start=0,end=n;
        while(start<=end){
              long long mid=(start+end)/2;
              long long sum = (mid*(mid+1))/2;
              if(sum==n) return mid;
              else if(sum>n) end=mid-1;
              else start=mid+1;
        }
        return end;
    }



Quesn 6.
vector<int> sortedSquares(vector<int>& nums) {
        int n=nums.size(),l=0,h=n-1,idx=n-1;
        vector<int> ans(n);
        while(l<=h){
            if(abs(nums[l])>abs(nums[h])){
                ans[idx]=nums[l]*nums[l];
                l++;
                idx--;
            }
            else{
                ans[idx]=nums[h]*nums[h];
                h--;
                idx--;
            }
        }
        return ans;
    }



Quesn 7.
int maxCount(int m, int n, vector<vector<int>>& ops) {
        int x=m,y=n;
        for(auto it:ops){
            x=min(x,it[0]);
            y=min(y,it[1]);
        }
        return x*y;
    }



Quesn 8.
vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> ans;
        int k=n,j=0;
        for(int i=0;i<n;i++){
            ans.push_back(nums[j++]);
            ans.push_back(nums[k++]);          
        }
        return ans;
    }
